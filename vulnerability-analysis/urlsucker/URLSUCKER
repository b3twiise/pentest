#!/usr/bin/perl -w
# 
# Sucks embedded URLs in the specified file or URI
#
# TODO:
#   * Minor bug: If url ends with / add "?test" or "#test" to avoid problems with parsing
#   * Integrate with ZAP or burpsuite
#
#
# Usage: URLSUCKER [-v] [-t <timeout>] ([-u url] | [-f file])
#        Give as a parameter a url (-u) or a file (-f) to scan.
#        -v parameter gives you verbose output, showing the response code and the potential URL found
#        -t parameter establishes a timeout between requests to evade WAF / security systems (in seconds)
#
# August 2016
# (c) spinfoo


use strict;
use LWP::UserAgent;
use Getopt::Long;
use File::Slurp;

my $ARGV;
my @urls;
my $help;
my $url;
my $file;
my $verbose;
my $timeout=0;


GetOptions(
	'help|?' => \$help,
	'u=s' => \$url,
	'f=s' => \$file,
	'v' => \$verbose,
	't=i' => \$timeout
);

sub extract {
	my $body= shift;
	my @p= split /\n/, $body;
	my %matches;
	foreach my $line (@p) {
		while ($line =~ /("[-\w\.\/:?=]+"||'[-\w\.\/:?=]+'||\([-\w\.\/:?=]+\))/g) {
			$matches{$1}= $1 if not exists $matches{$1};
		}
	}
	for my $i (keys %matches) {
		if (length($i) > 3) {
			my $u= substr $i, 1, -1;
			if (!($u ~~ @urls)) {
				push @urls, $u;
			}
		}
	}
	undef %matches;
}

sub show() {
	foreach (sort @urls) {
		print $_,"\n";
	}
}

sub check() {
	my @upa= split /\//, $url;
	my $basepath=join("/", @upa[0..$#upa-1]);
	my $baseurl=join("/", @upa[0..2]);
	my $ua= LWP::UserAgent->new;
	my $purl;
	my $ptext;
	$ua->max_redirect(0);
	$ua->agent("Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0");

	foreach (sort @urls) {
		if (/^\/\//) {
			$purl= $upa[0].$_;
			$ptext= "EXTERNAL ABSOLUTE URL";
		} elsif (/^http(s)?:\/\//) {
			$purl= $_;
			$ptext= "EXTERNAL ABSOLUTE URL";
		} elsif ( /^\// ) {
			$purl= $baseurl.$_;
			$ptext= "ABSOLUTE URL";
		} else {
			$purl= $basepath."/".$_;
			$ptext= "RELATIVE URL";
		}

		if ($timeout) {
			sleep($timeout); # seconds
		}
		my $response= $ua->head($purl);
		if ($response->code == 200) {
			print "[$ptext] ".$purl."\n";
		}
		elsif ($response->code != 200 && $verbose) {
			print "[".$response->code."] Found string $_\n";
		}
	}
}


if ($help || ($url && $file) || (!$url && !$file)) {
	print "Syntax: $0 [-v] [-t <timeout>] ([-u url] | [-f file])\n";
} elsif ($url) {
	my $ua= LWP::UserAgent->new;
	$ua->agent("Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0");
        $ua->ssl_opts(
                SSL_verify_mode => 0,
                verify_hostname => 0,
        );
	#$ua->proxy(['http', 'https'], 'http://127.0.0.1:8080/');
	my $response= $ua->get($url);
	if ($response->is_success) {
		extract($response->decoded_content);
		check();
	} else {
		print "Could not connect to $url\n";
		exit 1;
	}
} elsif ($file) {
	my $text= read_file($file) or die("Could not read $file");
	extract($text);
	show();
}

exit 0;

